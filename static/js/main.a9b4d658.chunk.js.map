{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Peepshow","arr","Array","apply","className","map","e","id","Moses","Mosaic","ontouchend","Lacerations","Untitled","App","basename","class","to","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yPAuDA,SAASA,IACP,IAAIC,EAAMC,MAAMC,MAAM,KAAMD,MAAM,MAClC,OACE,yBAAKE,UAAU,eACZH,EAAII,KAAI,SAACC,GACR,OAAO,yBAAKF,UAAU,kBAAkBG,GAAG,eAQnD,SAASC,IACP,IAAIP,EAAMC,MAAMC,MAAM,KAAMD,MAAM,KAClC,OACE,yBAAKE,UAAU,YACZH,EAAII,KAAI,SAACC,GACR,OAAO,yBAAKF,UAAU,eAAeG,GAAG,eAQhD,SAASE,IACP,IAAIR,EAAMC,MAAMC,MAAM,KAAMD,MAAM,MAClC,OACE,yBAAKE,UAAU,aACZH,EAAII,KAAI,SAACC,GACR,OAAO,yBAAKF,UAAU,gBAAgBG,GAAG,SAASG,WAAW,yBAQrE,SAASC,IAEP,IAAIV,EAAMC,MAAMC,MAAM,KAAMD,MAAM,KAClC,OACE,yBAAKE,UAAU,kBACZH,EAAII,KAAI,SAACC,GACR,OAAO,yBAAKF,UAAU,qBAAqBG,GAAG,eAQtD,SAASK,IAEP,IAAIX,EAAMC,MAAMC,MAAM,KAAMD,MAAM,IAClC,OAGE,yBAAKE,UAAU,eACb,yBAAKA,UAAU,qBACdH,EAAII,KAAI,SAACC,GACR,OAAO,yBAAKF,UAAU,kBAAkBG,GAAG,eAOpCM,MA1Gf,WACE,OACE,6BACE,kBAAC,IAAD,CAAQC,SAAS,YACf,yBAAKC,MAAM,cACX,6BACA,kBAAC,IAAD,CAAMA,MAAM,YAAYC,GAAG,aAA3B,aACA,kBAAC,IAAD,CAAMD,MAAM,YAAYC,GAAG,WAA3B,UACA,kBAAC,IAAD,CAAMD,MAAM,YAAYC,GAAG,gBAA3B,eACA,kBAAC,IAAD,CAAMD,MAAM,YAAYC,GAAG,UAA3B,SACA,kBAAC,IAAD,CAAMD,MAAM,YAAYC,GAAG,aAA3B,cAIA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,aACV,kBAACjB,EAAD,OAEF,kBAAC,IAAD,CAAOiB,KAAK,WACV,kBAACR,EAAD,OAEF,kBAAC,IAAD,CAAOQ,KAAK,gBACV,kBAACN,EAAD,OAEF,kBAAC,IAAD,CAAOM,KAAK,UACV,kBAACT,EAAD,OAEF,kBAAC,IAAD,CAAOS,KAAK,aACV,kBAACL,EAAD,WClCQM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a9b4d658.chunk.js","sourcesContent":["import React from 'react';\nimport './main.css';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction fix()\n{\n    var el = this;\n    var par = el.parentNode;\n    var next = el.nextSibling;\n    par.removeChild(el);\n    setTimeout(function() {par.insertBefore(el, next);}, 0)\n}\n\nfunction App(){\n  return(\n    <div>\n      <Router basename=\"/offline\">\n        <div class=\"navigation\">\n        <nav>\n        <Link class=\"navbutton\" to=\"/peepshow\">Peep Show</Link>\n        <Link class=\"navbutton\" to=\"/mosaic\">Mosaic</Link>\n        <Link class=\"navbutton\" to=\"/lacerations\">Lacerations</Link>\n        <Link class=\"navbutton\" to=\"/moses\">Moses</Link>\n        <Link class=\"navbutton\" to=\"/untitled\">Untitled</Link>\n        </nav>\n        </div>\n        \n        <Switch>\n          <Route path=\"/peepshow\">\n            <Peepshow />\n          </Route>\n          <Route path=\"/mosaic\">\n            <Mosaic />\n          </Route>\n          <Route path=\"/lacerations\">\n            <Lacerations />\n          </Route>\n          <Route path=\"/moses\">\n            <Moses />\n          </Route>\n          <Route path=\"/untitled\">\n            <Untitled />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\n\nfunction Peepshow() {\n  let arr = Array.apply(null, Array(300));\n  return (\n    <div className=\"peepshowApp\">\n      {arr.map((e) => {\n        return <div className=\"peepshowElement\" id=\"square\"></div>\n      })}\n      {/* <h1 class=\"info1\">MOVE / CLICK</h1>\n      <h1 class=\"info2\">???</h1> */}\n    </div>\n  )\n}\n\nfunction Moses() {\n  let arr = Array.apply(null, Array(40));\n  return (\n    <div className=\"mosesApp\">\n      {arr.map((e) => {\n        return <div className=\"mosesElement\" id=\"square\"></div>\n      })}\n      {/* <h1 class=\"info1\">MOVE / CLICK</h1>\n      <h1 class=\"info2\">???</h1> */}\n    </div>\n  )\n}\n\nfunction Mosaic() {\n  let arr = Array.apply(null, Array(200));\n  return (\n    <div className=\"mosaicApp\">\n      {arr.map((e) => {\n        return <div className=\"mosaicElement\" id=\"square\" ontouchend=\"this.onclick=fix\"></div>\n      })}\n      {/* <h1 class=\"info1\">MOVE / CLICK</h1>\n      <h1 class=\"info2\">???</h1> */}\n    </div>\n  )\n}\n\nfunction Lacerations() {\n\n  let arr = Array.apply(null, Array(60));\n  return (\n    <div className=\"lacerationsApp\">\n      {arr.map((e) => {\n        return <div className=\"lacerationsElement\" id=\"square\"></div>\n      })}\n      {/* <h1 class=\"info1\">MOVE / CLICK</h1>\n      <h1 class=\"info2\">???</h1> */}\n    </div>\n  )\n}\n\nfunction Untitled() {\n\n  let arr = Array.apply(null, Array(1));\n  return (\n    \n\n    <div className=\"untitledApp\">\n      <div className=\"untitledElement2\"></div>\n      {arr.map((e) => {\n        return <div className=\"untitledElement\" id=\"square\"></div>\n      })}\n      {/* <h1 class=\"info1\">MOVE / CLICK</h1>\n      <h1 class=\"info2\">???</h1> */}\n    </div>\n  )\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}